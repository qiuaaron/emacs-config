#contributor : Aaron , generated by script from template provided by Xilinx
#name : V6_FIFO36E1
#key:V6_FIFO36E1
# --

FIFO36E1 #(
   .ALMOST_EMPTY_OFFSET(13'h0080),    // Sets the almost empty threshold
   .ALMOST_FULL_OFFSET(13'h0080),     // Sets almost full threshold
   .DATA_WIDTH(4),                    // Sets data width to 4, 9, 18, 36, or 72
   .DO_REG(1),                        // Enable output register (0 or 1) Must be 1 if EN_SYN = FALSE
   .EN_ECC_READ("FALSE"),             // Enable ECC decoder, TRUE or FALSE
   .EN_ECC_WRITE("FALSE"),            // Enable ECC encoder, TRUE or FALSE
   .EN_SYN("FALSE"),                  // Specifies FIFO as Asynchronous (FALSE) or Synchronous (TRUE)
   .FIFO_MODE("FIFO36"),              // Sets mode to FIFO36 or FIFO36_72
   .FIRST_WORD_FALL_THROUGH("FALSE"), // Sets the FIFO FWFT to TRUE or FALSE
   .INIT(72'h000000000000000000),     // Initial values on output port
   .SRVAL(72'h000000000000000000)     // Set/Reset value for output port
)
FIFO36E1_inst (
   // ECC Signals: 1-bit (each) output: Error Correction Circuitry ports
   .DBITERR(DBITERR),             // 1-bit output: double bit error status output
   .ECCPARITY(ECCPARITY),         // 8-bit output: generated error correction parity
   .SBITERR(SBITERR),             // 1-bit output: single bit error status output
   // Read Data: 64-bit (each) output: Read output data
   .DO(DO),                       // 64-bit output: data output
   .DOP(DOP),                     // 8-bit output: parity data output
   // Status: 1-bit (each) output: Flags and other FIFO status outputs
   .ALMOSTEMPTY(ALMOSTEMPTY),     // 1-bit output: almost empty output flag
   .ALMOSTFULL(ALMOSTFULL),       // 1-bit output: almost full output flag
   .EMPTY(EMPTY),                 // 1-bit output: empty output flag
   .FULL(FULL),                   // 1-bit output: full output flag
   .RDCOUNT(RDCOUNT),             // 13-bit output: read count output
   .RDERR(RDERR),                 // 1-bit output: read error output
   .WRCOUNT(WRCOUNT),             // 13-bit output: write count output
   .WRERR(WRERR),                 // 1-bit output: write error
   // ECC Signals: 1-bit (each) input: Error Correction Circuitry ports
   .INJECTDBITERR(INJECTDBITERR), // 1-bit input: Inject a double bit error
   .INJECTSBITERR(INJECTSBITERR),
   // Read Control Signals: 1-bit (each) input: Read clock, enable and reset input signals
   .RDCLK(RDCLK),                 // 1-bit input: read clock input
   .RDEN(RDEN),                   // 1-bit input: read enable input
   .REGCE(REGCE),                 // 1-bit input: clock enable input
   .RST(RST),                     // 1-bit input: reset input
   .RSTREG(RSTREG),               // 1-bit input: output register set/reset
   // Write Control Signals: 1-bit (each) input: Write clock and enable input signals
   .WRCLK(WRCLK),                 // 1-bit input: write clock input
   .WREN(WREN),                   // 1-bit input: write enable input
   // Write Data: 64-bit (each) input: Write input data
   .DI(DI),                       // 64-bit input: data input
   .DIP(DIP)                      // 8-bit input: parity input
);

